.logo {
    height: 3.25rem;
    margin-left: 2rem;
}

.search {
    flex: 0 0 40%;

    display: flex;   //flex item is becoming flex container, this is a nested flexbox
    align-items: center; //stretch is default
    justify-content: center;

    @media only screen and (max-width: $bp-smallest) {
        order: 1;  //default is 0
        flex: 0 0 100%; 
    }

    &__input {
        font-family: inherit;   //inputs elements don't inherit font family of global document
        font-size: inherit;
        color: inherit;
        background-color: var(--grey-light-2);
        border: none;
        padding: .7rem 2rem;
        border-radius: 100px;
        width: 90%;
        transition: all .2s;
        margin-right: -3.25rem;

        &:focus {
            width: 100%;
            outline: none;
            background-color: var(--grey-light-3);
        }

        &::-webkit-input-placeholder {
            font-weight: 100;
            color: var(--grey-light-4);  //placeholder is lighter
        }
    }

    &__input:focus + &__button {   //adjecent sibling, selects button 
        background-color: var(--grey-light-3);
    }

    &__button {
        border: none;
        background-color: var(--grey-light-2);

        &:focus {
            outline: none;
        }

        &:active {
            transform: translateY(2px);
        }
    }

    &__icon {
        height: 2rem;
        width: 2rem;
        fill: var(--grey-dark-3);   //color svg
    }
}

.user-nav {
    display: flex;   //again flex item is now flex container
    align-items: center;
    align-self: stretch;

    & > * {  //selects all elements where parent is .user_nav (two user-nav__icon-box and user-nav__user
        padding: 0 2rem;
        cursor: pointer;
        height: 100%;
        display: flex;   //third flex item is now flex container
        align-items: center;
    }

    & > *:hover {
        background-color: var(--grey-light-2);
    }

    &__icon-box {
        position: relative;   //teacher tried putting this on &__icon below and it didn't work
    }

    &__icon {
        height: 2.25rem;
        width: 2.25rem;
        fill: var(--grey-dark-2);
    }

    &__notification {
        font-size: .8rem;
        height: 1.75rem;
        width: 1.75rem;
        border-radius: 50%;
        background-color: var(--color-primary);
        color: #fff;
        position: absolute;
        top: 1.5rem;
        right: 1.1rem;

        //for number text
        display: flex;
        justify-content: center;
        align-items: center;
    }

    &__user-photo {
        height: 3.75rem;
        border-radius: 50%;
        margin-right: 1rem;
    }

}



.side-nav {
    font-size: 1.4rem;
    list-style: none;
    margin-top: 3.5rem;

    @media only screen and (max-width: $bp-medium) {  
        display: flex;
        margin: 0;
    }

&__item {
    position: relative;

    &:not(:last-child) {
        margin-bottom: .5rem;

        @media only screen and (max-width: $bp-medium) {  
            margin-bottom: 0;
        }
    }

    @media only screen and (max-width: $bp-medium) {  
        flex: 1;   //let each one grow as much as they can, will grow equally (they each occupy a quarter)
    }
}

&__item:before {
    content: "";   //won't show in browser without this
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 3px;
    background-color: var(--color-primary);
    transform: scaleY(0);
    transition: transform .2s, width .4s cubic-bezier(1, 0, 0, 1) .2s, background-color .1s;
                                                                            
}

&__item:hover::before {
    transform: scaleY(1);   //scale only occurs on y axis
    width: 100%;
}

&__link:link, &__link:visited {
    color: var(--grey-light-1);
    text-decoration: none;
    text-transform: uppercase;
    display: block;  //a element is inline and padding can't be applied
    padding: 1.5rem 3rem;
    position: relative;  //z-index only works if we have a specified position
    z-index: 10;;

    display: flex; //again, flex item is now flex container
    align-items: center;

    @media only screen and (max-width: $bp-medium) {  
        justify-content: center;
        padding: 2rem;
    }

    @media only screen and (max-width: $bp-small) {  
        flex-direction: column;
        padding: 1.5rem .5rem;
    }
}

&__icon {
    width: 1.75rem;  //good to size svg as squares
    height: 1.75rem;
    margin-right: 2rem;
    //fill: var(--grey-light-1);
    fill: currentColor;  //color of element or parent

    @media only screen and (max-width: $bp-small) {  
        margin-right: 0;
        margin-bottom: .6rem;
        width: 1.5rem;  
        height: 1.5rem;
    }
}
}

.legal {
    font-size: 1.2rem;
    text-align: center;
    padding: 2.5rem;
    color: var(--grey-light-4);

    @media only screen and (max-width: $bp-medium) {  
        display: none;
    }
}


.gallery {
    display: flex;
    //max-width: 600px;   //this would make photo responsive with 
    &__photo {
        width: 100%;
        display: block; //****image should be block or inline-block to avoid a space under
    }
}

.overview {

    display: flex;
    align-items: center;
    border-bottom: var(--line);

    @media only screen and (max-width: $bp-smallest) {  
        justify-content: space-between;
     }

    &__heading {
        font-size: 2.25rem;
        font-weight: 200;
        text-transform: uppercase;
        letter-spacing: 2px;
        padding: 1.5rem 3rem;

        @media only screen and (max-width: $bp-small) {  
            font-size: 1.8rem;
            padding: 1.25rem 2rem;
        }

        @media only screen and (max-width: $bp-smallest) {
            font-size: 1.6rem;
        }
    }

    &__stars { 
        margin-right: auto;  //really good trick to use with flexbox. justify-content: space-between wasn't making it look how we wanted
        display: flex;   //svg elements behave like inline elements, small space below stars. This fixes it, could have also used line-height: 0

        @media only screen and (max-width: $bp-smallest) {  
            display: none;
         }
    }

    &__icon-star, &__icon-location {
        width: 1.75rem;  
        height: 1.75rem;
        fill: var(--color-primary);
    }

    &__location {
        font-size: 1.2rem;
        display: flex;
        align-items: center;
    }

    &__icon-location {
        margin-right: .5rem;
    }

    &__rating {
        background-color: var(--color-primary);
        margin-left: 3rem;
        color: #fff;
        align-self: stretch;   //overriding default align-items center that flex container set on this
        padding: 0 2.25rem;

        display: flex;   //flex item is now flex container, doing this to center items inside
        align-items: center;
        justify-content: center;
        flex-direction: column;

        @media only screen and (max-width: $bp-small) {  
            padding: 0rem 1.5rem;
        }
    }

    &__rating-average {
        font-size: 2.25rem;
        font-weight: 300;
        margin-bottom: -3px;

        @media only screen and (max-width: $bp-small) {  
            font-size: 1.8rem;
        }
    }   

    &__rating-count {
        font-size: .8rem;
        text-transform: uppercase;

        @media only screen and (max-width: $bp-small) {  
            font-size: .5rem;
        }

        @media only screen and (max-width: $bp-smallest) {  
            font-size: .4rem;
        }
    }
    
}


.btn-inline {
    border: none;
    color: var(--color-primary);
    font-size: inherit;    // so we can reuse it and it takes parent elements size
    border-bottom: 1px solid currentColor;   //--color-primary
    display: inline-block;
    background-color: transparent;  //reusability
    cursor: pointer;
    transition: all .2s;

    @media only screen and (max-width: $bp-smallest) {
        border: none;
    }

    & span {
        margin-left: 3px;
        transition: margin-left .2s;
    }
    
    &:hover {
        color: var(--grey-dark-1);  //NOW border-bottom color adapts to this! (because of currentColor)

        span {
            margin-left: 7px;
        }
    }
}

//:last-child applies to all childen of the current element (can't use because the p is not the last child of the parent)
//:last-of-type applies to only the same type of element (can use because the p is the last p child of the parent)
.paragraph:not(:last-of-type) { 
    margin-bottom: 2rem;
}

.list {
    list-style: none;
    margin: 3rem 0;
    padding: 3rem 0;
    border-top: var(--line);
    border-bottom: var(--line);

    display: flex;
    flex-wrap: wrap;

    &__item {
        flex: 0 0 50%;
        margin-bottom: .7rem;
    }

    //sprite.svg was renamed from what it was when downloaded
    &__item:before {  //instead of using svg in html, we can use it in css here
        content: '';
        display: inline-block;
        height: 1rem;
        width: 1rem;
        margin-right: .7rem;

        //older browsers, can't change icon color
        background-image: url(../img/chevron-thin-right.svg);
        background-size: cover;

        //newer browsers - use masks (point of this is to change background color)
        @supports (-webkit-mask-image: url()) or (mask-image: url()) {
            background-color: var(--color-primary);
            -webkit-mask-image: url(../img/chevron-thin-right.svg);
            -webkit-mask-size: cover;
            mask-image: url(../img/chevron-thin-right.svg);
            mask-size: cover;
            background-image: none; //to remove what we set for old browsers
        }

    }
}

.recommend {
    font-size: 1.3rem;
    color: var(--grey-dark-3);

    display: flex;
    align-items: center;

    &__count {
        margin-right: auto;
    }

    &__friends {
        display: flex;   //so they stay side by side when we decrease page width
    }

    &__photo {
        height: 4rem;
        width: 4rem;
        border-radius: 50%;
    }
}


.review {
    background-color: #fff;
    box-shadow: var(--shadow-light);
    padding: 3rem;
    margin-bottom: 3.5rem;

    @media only screen and (max-width: $bp-medium) {  
        padding: 2rem;
        margin-bottom: 3rem;
    }

    &__text {

    }

    &__user {
        display: flex;
        align-items: center;
    }

    &__photo {
        height: 4.5rem;
        width: 4.5rem;
        border-radius: 50%;
        margin-right: 1.5rem;
    }

    &__user-box {
        margin-right: auto;
    }

    &__user-name {
        font-size: 1.1rem;
        font-weight: 400;
        text-transform: uppercase;
        margin-bottom: .4rem;
    }

    &__user-date {
        font-size: 1rem;
        color: var( --grey-dark-3);
    }

    &__rating {
        color: var( --color-primary);
        font-size: 2.2rem;
        font-weight: 300;
    }
}


.cta {
    padding: 3.5rem 0;
    text-align: center;

    @media only screen and (max-width: $bp-medium) {  
        padding: 2.5rem 0;
    }

    &__book-now {
        font-size: 1.5rem;
        font-weight: 300;
        text-transform: uppercase;
        margin-bottom: 2.5rem;
    }
}

.btn {
    font-size: 1.5rem;
    text-transform: uppercase;
    outline: none;
    cursor: pointer;
    font-weight: 300;
    border: none;
    background-image: linear-gradient(to right, var(--color-primary-light), var(--color-primary-dark));
    color: #fff;
    border-radius: 5px;
    position: relative;
    overflow: hidden;

    & > * {
        display: inline-block;
        height: 100%;
        width: 100%;
        transition: all .2s;
    }

    &__visible {
        padding: 1.8rem 5.2rem;
    }

    &__invisible {
        position: absolute;
        padding: 2rem 0;
        left: 0;
        top: -100%;
    }

    &:hover &__visible {
        transform: translateY(100%);
    }   

    &:hover &__invisible {
        top: 0;
    }
}